{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["vkApi","VK","token","version","timeout","App","useState","postLink","setPostLink","commentText","setCommentText","commentParams","setCommentParams","useEffect","url","parse","query","w","match","owner_id","post_id","e","console","error","className","type","value","placeholder","onChange","currentTarget","onClick","call","message","then","comment_id","log","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"4YAMIA,G,OAAQ,IAAIC,KAAG,CACjBC,MAAO,wFACPC,QAAS,OACTC,QAAS,OA6CIC,MA1Cf,WACE,IADa,EAcmBC,mBAAS,IAd5B,mBAcNC,EAdM,KAcIC,EAdJ,OAeyBF,mBAAS,IAflC,mBAeNG,EAfM,KAeOC,EAfP,OAgB6BJ,mBAAS,IAhBtC,mBAgBNK,EAhBM,KAgBSC,EAhBT,KA+Bb,OAbAC,qBAAU,WACR,GAAIN,EACF,IAAK,IAAD,EACmBO,IAAIC,MAAMR,GAAU,GAAlCS,MAAQC,EACeC,MAAM,QAFlC,mBAEKC,EAFL,KAEeC,EAFf,KAGFR,EAAiB,CAACO,WAAUC,YAC5B,MAAOC,GACPC,QAAQC,MAAMF,MAIjB,CAACd,IAGF,yBAAKiB,UAAU,OACb,2BAAOC,KAAK,OAAOC,MAAOnB,EAAUoB,YAAY,6EAAiBC,SAAU,gBAAEC,EAAF,EAAEA,cAAF,OAAqBrB,EAAYqB,EAAcH,UAC1H,6BACA,2BAAOD,KAAK,OAAOC,MAAOjB,EAAakB,YAAY,qEAAcC,SAAU,gBAAEC,EAAF,EAAEA,cAAF,OAAqBnB,EAAemB,EAAcH,UAC7H,6BAAK,6BAAK,6BACV,4BAAQI,QApCU,WACf9B,GAGLA,EAAM+B,KAAK,qBAAX,eAAsCpB,EAAtC,CAAqDqB,QAASvB,KAC3DwB,MAAK,SAAAC,GACJxB,EAAe,IACfF,EAAY,IACZc,QAAQa,IAAID,QA4Bd,kBCrCcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrB,MACvB,2DCZNsB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAA3B,GACLD,QAAQC,MAAMA,EAAMS,c","file":"static/js/main.64547495.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport url from 'url';\nimport {VK} from 'vk-call';\n\nimport './App.css';\n\nlet vkApi = new VK({\n  token: '207dfb85136fe9e029cb08676b43eecbc2a115dfd289acf955d3c606a9bf825ea1a4f0bc80b5bb00dc9fd',\n  version: \"5.50\",\n  timeout: 10000\n});\n\nfunction App() {\n  const createComment = () => {\n    if (!vkApi) {\n      return\n    }\n    vkApi.call(\"wall.createComment\", { ...commentParams, message: commentText })\n      .then(comment_id => {\n        setCommentText('');\n        setPostLink('');\n        console.log(comment_id);\n      }\n    );\n  };\n\n  const [postLink, setPostLink] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [commentParams, setCommentParams] = useState({});\n\n  useEffect(()=>{\n    if (postLink) {\n      try {\n        const {query: {w}} = url.parse(postLink, true);\n        const [owner_id, post_id] = w.match(/\\d+/g);\n        setCommentParams({owner_id, post_id});\n      } catch (e) {\n        console.error(e);\n      }\n\n    }\n  }, [postLink]);\n\n  return (\n    <div className=\"App\">\n      <input type=\"text\" value={postLink} placeholder=\"ссылка на пост\" onChange={({currentTarget}) => setPostLink(currentTarget.value)}/>\n      <br/>\n      <input type=\"text\" value={commentText} placeholder=\"комментарий\" onChange={({currentTarget}) => setCommentText(currentTarget.value)}/>\n      <br/><br/><br/>\n      <button onClick={createComment}>send comment</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}